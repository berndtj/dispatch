///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/vmware/dispatch/pkg/resources/baseimage/v1"
	scheme "github.com/vmware/dispatch/pkg/resources/gen/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// BaseImagesGetter has a method to return a BaseImageInterface.
// A group's client should implement this interface.
type BaseImagesGetter interface {
	BaseImages(namespace string) BaseImageInterface
}

// BaseImageInterface has methods to work with BaseImage resources.
type BaseImageInterface interface {
	Create(*v1.BaseImage) (*v1.BaseImage, error)
	Update(*v1.BaseImage) (*v1.BaseImage, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.BaseImage, error)
	List(opts metav1.ListOptions) (*v1.BaseImageList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.BaseImage, err error)
	BaseImageExpansion
}

// baseImages implements BaseImageInterface
type baseImages struct {
	client rest.Interface
	ns     string
}

// newBaseImages returns a BaseImages
func newBaseImages(c *ResourcesV1Client, namespace string) *baseImages {
	return &baseImages{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the baseImage, and returns the corresponding baseImage object, and an error if there is any.
func (c *baseImages) Get(name string, options metav1.GetOptions) (result *v1.BaseImage, err error) {
	result = &v1.BaseImage{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("baseimages").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of BaseImages that match those selectors.
func (c *baseImages) List(opts metav1.ListOptions) (result *v1.BaseImageList, err error) {
	result = &v1.BaseImageList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("baseimages").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested baseImages.
func (c *baseImages) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("baseimages").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a baseImage and creates it.  Returns the server's representation of the baseImage, and an error, if there is any.
func (c *baseImages) Create(baseImage *v1.BaseImage) (result *v1.BaseImage, err error) {
	result = &v1.BaseImage{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("baseimages").
		Body(baseImage).
		Do().
		Into(result)
	return
}

// Update takes the representation of a baseImage and updates it. Returns the server's representation of the baseImage, and an error, if there is any.
func (c *baseImages) Update(baseImage *v1.BaseImage) (result *v1.BaseImage, err error) {
	result = &v1.BaseImage{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("baseimages").
		Name(baseImage.Name).
		Body(baseImage).
		Do().
		Into(result)
	return
}

// Delete takes name of the baseImage and deletes it. Returns an error if one occurs.
func (c *baseImages) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("baseimages").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *baseImages) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("baseimages").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched baseImage.
func (c *baseImages) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.BaseImage, err error) {
	result = &v1.BaseImage{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("baseimages").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}

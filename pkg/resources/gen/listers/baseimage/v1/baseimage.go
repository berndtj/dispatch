///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/vmware/dispatch/pkg/resources/baseimage/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BaseImageLister helps list BaseImages.
type BaseImageLister interface {
	// List lists all BaseImages in the indexer.
	List(selector labels.Selector) (ret []*v1.BaseImage, err error)
	// BaseImages returns an object that can list and get BaseImages.
	BaseImages(namespace string) BaseImageNamespaceLister
	BaseImageListerExpansion
}

// baseImageLister implements the BaseImageLister interface.
type baseImageLister struct {
	indexer cache.Indexer
}

// NewBaseImageLister returns a new BaseImageLister.
func NewBaseImageLister(indexer cache.Indexer) BaseImageLister {
	return &baseImageLister{indexer: indexer}
}

// List lists all BaseImages in the indexer.
func (s *baseImageLister) List(selector labels.Selector) (ret []*v1.BaseImage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.BaseImage))
	})
	return ret, err
}

// BaseImages returns an object that can list and get BaseImages.
func (s *baseImageLister) BaseImages(namespace string) BaseImageNamespaceLister {
	return baseImageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BaseImageNamespaceLister helps list and get BaseImages.
type BaseImageNamespaceLister interface {
	// List lists all BaseImages in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.BaseImage, err error)
	// Get retrieves the BaseImage from the indexer for a given namespace and name.
	Get(name string) (*v1.BaseImage, error)
	BaseImageNamespaceListerExpansion
}

// baseImageNamespaceLister implements the BaseImageNamespaceLister
// interface.
type baseImageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BaseImages in the indexer for a given namespace.
func (s baseImageNamespaceLister) List(selector labels.Selector) (ret []*v1.BaseImage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.BaseImage))
	})
	return ret, err
}

// Get retrieves the BaseImage from the indexer for a given namespace and name.
func (s baseImageNamespaceLister) Get(name string) (*v1.BaseImage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("baseimage"), name)
	}
	return obj.(*v1.BaseImage), nil
}

///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceClass service class
// swagger:model ServiceClass

type ServiceClass struct {

	// bindable
	Bindable bool `json:"bindable,omitempty"`

	// broker
	// Required: true
	Broker *string `json:"broker"`

	// created time
	CreatedTime int64 `json:"createdTime,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID strfmt.UUID `json:"id,omitempty"`

	// kind
	// Read Only: true
	// Pattern: ^[\w\d\-]+$
	Kind string `json:"kind,omitempty"`

	// name
	// Required: true
	// Pattern: ^[\w\d\-]+$
	Name *string `json:"name"`

	// plans
	Plans []ServicePlan `json:"plans"`

	// reason
	Reason []string `json:"reason"`

	// status
	Status Status `json:"status,omitempty"`

	// tags
	Tags ServiceClassTags `json:"tags"`
}

/* polymorph ServiceClass bindable false */

/* polymorph ServiceClass broker false */

/* polymorph ServiceClass createdTime false */

/* polymorph ServiceClass description false */

/* polymorph ServiceClass id false */

/* polymorph ServiceClass kind false */

/* polymorph ServiceClass name false */

/* polymorph ServiceClass plans false */

/* polymorph ServiceClass reason false */

/* polymorph ServiceClass status false */

/* polymorph ServiceClass tags false */

// Validate validates this service class
func (m *ServiceClass) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBroker(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePlans(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceClass) validateBroker(formats strfmt.Registry) error {

	if err := validate.Required("broker", "body", m.Broker); err != nil {
		return err
	}

	return nil
}

func (m *ServiceClass) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	if err := validate.Pattern("kind", "body", string(m.Kind), `^[\w\d\-]+$`); err != nil {
		return err
	}

	return nil
}

func (m *ServiceClass) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `^[\w\d\-]+$`); err != nil {
		return err
	}

	return nil
}

func (m *ServiceClass) validatePlans(formats strfmt.Registry) error {

	if swag.IsZero(m.Plans) { // not required
		return nil
	}

	for i := 0; i < len(m.Plans); i++ {

	}

	return nil
}

func (m *ServiceClass) validateReason(formats strfmt.Registry) error {

	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	return nil
}

func (m *ServiceClass) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceClass) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceClass) UnmarshalBinary(b []byte) error {
	var res ServiceClass
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

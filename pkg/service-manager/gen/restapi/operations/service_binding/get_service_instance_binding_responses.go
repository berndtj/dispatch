// Code generated by go-swagger; DO NOT EDIT.

package service_binding

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/dispatch/pkg/service-manager/gen/models"
)

// GetServiceInstanceBindingOKCode is the HTTP code returned for type GetServiceInstanceBindingOK
const GetServiceInstanceBindingOKCode int = 200

/*GetServiceInstanceBindingOK successful operation

swagger:response getServiceInstanceBindingOK
*/
type GetServiceInstanceBindingOK struct {

	/*
	  In: Body
	*/
	Payload *models.ServiceBinding `json:"body,omitempty"`
}

// NewGetServiceInstanceBindingOK creates GetServiceInstanceBindingOK with default headers values
func NewGetServiceInstanceBindingOK() *GetServiceInstanceBindingOK {
	return &GetServiceInstanceBindingOK{}
}

// WithPayload adds the payload to the get service instance binding o k response
func (o *GetServiceInstanceBindingOK) WithPayload(payload *models.ServiceBinding) *GetServiceInstanceBindingOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service instance binding o k response
func (o *GetServiceInstanceBindingOK) SetPayload(payload *models.ServiceBinding) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceInstanceBindingOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetServiceInstanceBindingBadRequestCode is the HTTP code returned for type GetServiceInstanceBindingBadRequest
const GetServiceInstanceBindingBadRequestCode int = 400

/*GetServiceInstanceBindingBadRequest Invalid ID supplied

swagger:response getServiceInstanceBindingBadRequest
*/
type GetServiceInstanceBindingBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetServiceInstanceBindingBadRequest creates GetServiceInstanceBindingBadRequest with default headers values
func NewGetServiceInstanceBindingBadRequest() *GetServiceInstanceBindingBadRequest {
	return &GetServiceInstanceBindingBadRequest{}
}

// WithPayload adds the payload to the get service instance binding bad request response
func (o *GetServiceInstanceBindingBadRequest) WithPayload(payload *models.Error) *GetServiceInstanceBindingBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service instance binding bad request response
func (o *GetServiceInstanceBindingBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceInstanceBindingBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetServiceInstanceBindingNotFoundCode is the HTTP code returned for type GetServiceInstanceBindingNotFound
const GetServiceInstanceBindingNotFoundCode int = 404

/*GetServiceInstanceBindingNotFound Service instance not found

swagger:response getServiceInstanceBindingNotFound
*/
type GetServiceInstanceBindingNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetServiceInstanceBindingNotFound creates GetServiceInstanceBindingNotFound with default headers values
func NewGetServiceInstanceBindingNotFound() *GetServiceInstanceBindingNotFound {
	return &GetServiceInstanceBindingNotFound{}
}

// WithPayload adds the payload to the get service instance binding not found response
func (o *GetServiceInstanceBindingNotFound) WithPayload(payload *models.Error) *GetServiceInstanceBindingNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service instance binding not found response
func (o *GetServiceInstanceBindingNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceInstanceBindingNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetServiceInstanceBindingDefault Generic error response

swagger:response getServiceInstanceBindingDefault
*/
type GetServiceInstanceBindingDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetServiceInstanceBindingDefault creates GetServiceInstanceBindingDefault with default headers values
func NewGetServiceInstanceBindingDefault(code int) *GetServiceInstanceBindingDefault {
	if code <= 0 {
		code = 500
	}

	return &GetServiceInstanceBindingDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get service instance binding default response
func (o *GetServiceInstanceBindingDefault) WithStatusCode(code int) *GetServiceInstanceBindingDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get service instance binding default response
func (o *GetServiceInstanceBindingDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get service instance binding default response
func (o *GetServiceInstanceBindingDefault) WithPayload(payload *models.Error) *GetServiceInstanceBindingDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service instance binding default response
func (o *GetServiceInstanceBindingDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceInstanceBindingDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
